# Generated by Django 4.2.20 on 2025-05-10 18:04

import core.apps.common.utils.path_generation
import core.apps.common.utils.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('title', models.CharField(max_length=255, verbose_name='Название проекта')),
                ('description', models.TextField(blank=True, default='', verbose_name='Описание проекта')),
                ('is_visible', models.BooleanField(default=False, verbose_name='Виден ли проект в катологе')),
                ('count_services', models.IntegerField(blank=True, default=0, verbose_name='Количество сервисов этого проекта, для видимости что покупатель выбрал все')),
            ],
            options={
                'verbose_name': 'Проект',
                'verbose_name_plural': 'Проекты',
            },
        ),
        migrations.CreateModel(
            name='Project_Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена услуги')),
                ('download_link', models.URLField(blank=True, null=True, verbose_name='Ссылка на скачивание')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('floor', models.PositiveIntegerField(blank=True, null=True, verbose_name='Этажность')),
                ('slug', models.SlugField(blank=True, max_length=230, null=True, unique=True, verbose_name='URL')),
                ('the_area_filter', models.PositiveIntegerField(blank=True, null=True, verbose_name='Начниается от скольки метров в квадрате')),
                ('price_filter', models.DecimalField(blank=True, decimal_places=0, max_digits=15, null=True, verbose_name='Начиная от какой суммы')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=1024, verbose_name='Название услуги')),
                ('description', models.TextField(verbose_name='Подробное описание')),
                ('students', models.ManyToManyField(related_name='services', through='projects.Project_Service', to='projects.project')),
            ],
            options={
                'verbose_name': 'Услуга',
                'verbose_name_plural': 'Услуги',
            },
        ),
        migrations.CreateModel(
            name='Project_Specifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('floors', models.PositiveIntegerField(verbose_name='Этажность')),
                ('overall_length', models.FloatField(verbose_name='Длина')),
                ('overall_width', models.FloatField(verbose_name='Ширина')),
                ('area', models.PositiveIntegerField(default=0, verbose_name='Площадь')),
                ('construction_cost', models.DecimalField(decimal_places=2, default=0.0, max_digits=20, verbose_name='Стоимость строительства от')),
                ('wall_material', models.CharField(max_length=1024, verbose_name='Материал стен')),
                ('overlap', models.CharField(max_length=1024, verbose_name='Перекрытие')),
                ('roof_type', models.CharField(max_length=1024, verbose_name='Тип кровли')),
                ('roofing_material', models.CharField(max_length=1024, verbose_name='Кровельный материал')),
                ('exterior_decoration', models.CharField(max_length=1024, verbose_name='Наружная отделка')),
                ('foundation', models.CharField(blank=True, default='', max_length=1024, verbose_name='Фундамент')),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='project_specifications', to='projects.project', verbose_name='Проект')),
            ],
            options={
                'verbose_name': 'Характеристики проектов',
            },
        ),
        migrations.AddField(
            model_name='project_service',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.service'),
        ),
        migrations.CreateModel(
            name='Project_Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=core.apps.common.utils.path_generation.get_path_upload_project_images, validators=[core.apps.common.utils.validators.validate_size_image], verbose_name='Изображение дома')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_images', to='projects.project')),
            ],
            options={
                'verbose_name': 'Изображения проекта',
                'verbose_name_plural': 'Изображения проектов',
            },
        ),
        migrations.AlterUniqueTogether(
            name='project_service',
            unique_together={('project', 'service')},
        ),
    ]
